apiVersion: v1
kind: Namespace
metadata:
  name: opportunity-scanner
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opportunity-scanner-app
  namespace: opportunity-scanner
  labels:
    app: opportunity-scanner
    component: app
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: opportunity-scanner
      component: app
  template:
    metadata:
      labels:
        app: opportunity-scanner
        component: app
    spec:
      containers:
      - name: app
        image: opportunity-scanner:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: opportunity-scanner-secrets
              key: mongodb-uri
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: opportunity-scanner-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: opportunity-scanner-secrets
              key: jwt-secret
        - name: REDDIT_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: reddit-credentials
              key: client-id
        - name: REDDIT_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: reddit-credentials
              key: client-secret
        - name: REDDIT_REFRESH_TOKEN
          valueFrom:
            secretKeyRef:
              name: reddit-credentials
              key: refresh-token
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opportunity-scanner-worker
  namespace: opportunity-scanner
  labels:
    app: opportunity-scanner
    component: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: opportunity-scanner
      component: worker
  template:
    metadata:
      labels:
        app: opportunity-scanner
        component: worker
    spec:
      containers:
      - name: worker
        image: opportunity-scanner:latest
        command: ["node", "src/worker.js"]
        env:
        - name: NODE_ENV
          value: "production"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: opportunity-scanner-secrets
              key: mongodb-uri
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: opportunity-scanner-secrets
              key: redis-url
        - name: REDDIT_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: reddit-credentials
              key: client-id
        - name: REDDIT_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: reddit-credentials
              key: client-secret
        - name: REDDIT_REFRESH_TOKEN
          valueFrom:
            secretKeyRef:
              name: reddit-credentials
              key: refresh-token
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: opportunity-scanner-service
  namespace: opportunity-scanner
  labels:
    app: opportunity-scanner
spec:
  selector:
    app: opportunity-scanner
    component: app
  ports:
  - name: http
    port: 80
    targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: opportunity-scanner-ingress
  namespace: opportunity-scanner
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - opportunity-scanner.yourdomain.com
    secretName: opportunity-scanner-tls
  rules:
  - host: opportunity-scanner.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: opportunity-scanner-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: opportunity-scanner-hpa
  namespace: opportunity-scanner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: opportunity-scanner-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80